# AC-12: SESSION TERMINATION
# The information system automatically terminates a user session after 
# [Assignment: organization defined conditions or trigger events requiring 
# session disconnect]. 

# start with
#   powershell.exe -windowstyle hidden -executionpolicy Unrestricted C:\PATH\TO\logoff.ps1
#
# `-windowstyle hidden` will make your PowerShell disappear/run in background
# `-executionpolicy Unrestricted` will enable this PowerShell process to allow non-signed scripts

# How long before locking?
# * -Seconds 10 ( = 10 Seconds)
# * -Minutes 10 ( = 10 Minutes)
# * -Hours 10 ( = 10 Hours)
$IDLE_TIMEOUT = New-TimeSpan -Hours 12

# This snippet is from http://stackoverflow.com/a/15846912
Add-Type @'
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
namespace PInvoke.Win32 {
    public static class UserInput {
        [DllImport("user32.dll", SetLastError=false)]
        private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);
        [StructLayout(LayoutKind.Sequential)]
        private struct LASTINPUTINFO {
            public uint cbSize;
            public int dwTime;
        }

        public static DateTime LastInput {
            get {
                DateTime bootTime = DateTime.UtcNow.AddMilliseconds(-Environment.TickCount);
                DateTime lastInput = bootTime.AddMilliseconds(LastInputTicks);
                return lastInput;
            }
        }

        public static TimeSpan IdleTime {
            get {
                return DateTime.UtcNow.Subtract(LastInput);
            }
        }

        public static int LastInputTicks {
            get {
                LASTINPUTINFO lii = new LASTINPUTINFO();
                lii.cbSize = (uint)Marshal.SizeOf(typeof(LASTINPUTINFO));
                GetLastInputInfo(ref lii);
                return lii.dwTime;
            }
        }
    }
}
'@
#End snippet

# Helper: Is currently locked?
$locked = 0;

do {
    $idle_time = [PInvoke.Win32.UserInput]::IdleTime

    # Terminate the session of the current user.
    if (($locked -eq 0) -And ($idle_time -gt $IDLE_TIMEOUT)) {
        rundll32.exe shell32.dll,SHExitWindowsEx 0
        $locked = 1;
    }

    # Reset parameters based on idle state.
    if ($idle_time -lt $IDLE_TIMEOUT) {
        $locked = 0;
    }
    
    Start-Sleep -Seconds 10
} while(1)
